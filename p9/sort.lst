     1                                  ; Adrian Faircloth
     2                                  ; 11/09/2020
     3                                  ; Project 9: Sort
     4                                  ; Sorts an array of unsigned byte values and prints the array
     5                                  
     6                                  ;; Macro for printing
     7                                  ;; Pass pointer to start of string and length of string
     8                                  %macro	Print 2
     9                                  	pusha
    10                                  	mov	eax, 4
    11                                  	mov	ebx, 1
    12                                  	mov	ecx, %1
    13                                  	mov	edx, %2
    14                                  	int	80h
    15                                  	popa
    16                                  %endmacro
    17                                  
    18                                  SECTION .data
    19                                  ; define data/variables here.  Think DB, DW, DD, DQ
    20 00000000 64C8050A005816          nums: 		db      100, 200, 5, 10, 0, 88, 22 ; Array to be sorted
    21                                  numslen:   	EQU     ($-nums)	  ; Length of array
    22 00000007 202020                  printField:	db	"   "	 	  ; Stores converted value
    23 0000000A 1B5B324A                clr             db 	1bh,'[2J'	  ; Clear screen string
    24 0000000E 64                      hundred:	db	100		 
    25 0000000F 0A                      ten:		db	10
    26 00000010 4F726967696E616C20-     unsortHeader:	db	"Original Array:" ; Header for unsorted array
    27 00000019 41727261793A       
    28                                  header1len:	EQU	($-unsortHeader)  ; Length of above header
    29 0000001F 536F72746564204172-     sortHeader:	db	"Sorted Array:"   ; Header for sorted array
    30 00000028 7261793A           
    31                                  header2len:	EQU	($-sortHeader)	  ; Length of above header
    32                                  SECTION .bss
    33                                  ; define uninitialized data here
    34                                  
    35                                  SECTION .text
    36                                  global _main, _convNum, _printArray, _sort
    37                                  _main:
    38                                  	Print	clr, 4 			 ;; Clear screen
    39 00000000 60                  <1>  pusha
    40 00000001 B804000000          <1>  mov eax, 4
    41 00000006 BB01000000          <1>  mov ebx, 1
    42 0000000B B9[0A000000]        <1>  mov ecx, %1
    43 00000010 BA04000000          <1>  mov edx, %2
    44 00000015 CD80                <1>  int 80h
    45 00000017 61                  <1>  popa
    46                                  	Print	unsortHeader, header1len ;; Printing header for unsorted array
    47 00000018 60                  <1>  pusha
    48 00000019 B804000000          <1>  mov eax, 4
    49 0000001E BB01000000          <1>  mov ebx, 1
    50 00000023 B9[10000000]        <1>  mov ecx, %1
    51 00000028 BA0F000000          <1>  mov edx, %2
    52 0000002D CD80                <1>  int 80h
    53 0000002F 61                  <1>  popa
    54                                  	Print	ten, 1			 ;; Move cursor to next line
    55 00000030 60                  <1>  pusha
    56 00000031 B804000000          <1>  mov eax, 4
    57 00000036 BB01000000          <1>  mov ebx, 1
    58 0000003B B9[0F000000]        <1>  mov ecx, %1
    59 00000040 BA01000000          <1>  mov edx, %2
    60 00000045 CD80                <1>  int 80h
    61 00000047 61                  <1>  popa
    62 00000048 E86F000000              	call	_printArray		 ;; Printing unsorted array
    63                                  	
    64 0000004D E8B1000000              	call	_sort
    65                                  	Print	sortHeader, header2len
    66 00000052 60                  <1>  pusha
    67 00000053 B804000000          <1>  mov eax, 4
    68 00000058 BB01000000          <1>  mov ebx, 1
    69 0000005D B9[1F000000]        <1>  mov ecx, %1
    70 00000062 BA0D000000          <1>  mov edx, %2
    71 00000067 CD80                <1>  int 80h
    72 00000069 61                  <1>  popa
    73                                  	Print	ten, 1
    74 0000006A 60                  <1>  pusha
    75 0000006B B804000000          <1>  mov eax, 4
    76 00000070 BB01000000          <1>  mov ebx, 1
    77 00000075 B9[0F000000]        <1>  mov ecx, %1
    78 0000007A BA01000000          <1>  mov edx, %2
    79 0000007F CD80                <1>  int 80h
    80 00000081 61                  <1>  popa
    81 00000082 E835000000              	call	_printArray
    82                                  lastBreak:
    83                                  
    84                                  ; Normal termination code
    85 00000087 B801000000              mov eax, 1
    86 0000008C BB00000000              mov ebx, 0
    87 00000091 CD80                    int 80h
    88                                  
    89                                  
    90                                  
    91                                  ;;;;;;;;;;;;;;;;;END OF MAIN;;;;;;;;;;;;;;;;;;
    92                                  ;; Function for converting literal byte values into characters
    93                                  ;; Returns value with 3 digits, leading zeros if applicable
    94                                  ;; Value to be converted expected in al register
    95                                  _convNum:
    96 00000093 60                      	pusha
    97 00000094 30E4                    	xor	ah, ah
    98 00000096 BB[07000000]            	mov	ebx, printField	;; Puts pointer to printField in ebx
    99 0000009B F635[0E000000]          	div	BYTE[hundred]	;; Divides al by 100 to get 1st digit
   100 000000A1 0430                    	add	al, '0'		;; Converts quotient to character
   101 000000A3 8803                    	mov	[ebx], al	;; Moves character to first spot of printField
   102 000000A5 43                      	inc	ebx		;; Moves pointer in ebx to next space
   103 000000A6 66C1E808                	shr	ax, 8		;; Shifts ax so remainder is in al
   104 000000AA F635[0F000000]          	div	BYTE[ten]	;; Divides al by 10 to get 2nd digit
   105 000000B0 0430                    	add	al, '0'		;; Converts quotient to character
   106 000000B2 8803                    	mov	[ebx], al	;; Moves character to 2nd spot of printField
   107 000000B4 80C430                  	add	ah, '0'		;; Converts remaining 3rd digit to character
   108 000000B7 43                      	inc	ebx		;; Moves pointer in ebx to next space
   109 000000B8 8823                    	mov	[ebx], ah	;; Moves character to 3rd spot of printField
   110 000000BA 61                      	popa
   111 000000BB C3                      	ret
   112                                  
   113                                  ;; Function for printing array of byte values, one per line
   114                                  _printArray:
   115 000000BC 60                      	pusha
   116 000000BD BB[00000000]            	mov	ebx, nums
   117 000000C2 B907000000              	mov	ecx, numslen
   118                                  printArrayLoop:		        ;; Printing each value in array
   119 000000C7 8B03                    	mov	eax, [ebx]	;; Setting al for _convNum call
   120 000000C9 E8C5FFFFFF              	call	_convNum
   121                                  	Print	printField, 3   ;; Printing converted value
   122 000000CE 60                  <1>  pusha
   123 000000CF B804000000          <1>  mov eax, 4
   124 000000D4 BB01000000          <1>  mov ebx, 1
   125 000000D9 B9[07000000]        <1>  mov ecx, %1
   126 000000DE BA03000000          <1>  mov edx, %2
   127 000000E3 CD80                <1>  int 80h
   128 000000E5 61                  <1>  popa
   129 000000E6 43                      	inc	ebx	        ;; Setting pointer to move to next val in array
   130                                  	Print	ten, 1	        ;; Moving cursor to next line
   131 000000E7 60                  <1>  pusha
   132 000000E8 B804000000          <1>  mov eax, 4
   133 000000ED BB01000000          <1>  mov ebx, 1
   134 000000F2 B9[0F000000]        <1>  mov ecx, %1
   135 000000F7 BA01000000          <1>  mov edx, %2
   136 000000FC CD80                <1>  int 80h
   137 000000FE 61                  <1>  popa
   138 000000FF E2C6                    	loop printArrayLoop
   139 00000101 61                      	popa
   140 00000102 C3                      	ret	
   141                                  
   142                                  ;; Function for sorting an array of byte values
   143                                  _sort:
   144 00000103 60                      	pusha
   145 00000104 B907000000              	mov	ecx, numslen
   146 00000109 49                      	dec	ecx
   147 0000010A B807000000              	mov	eax, numslen
   148 0000010F F7E1                    	mul	ecx
   149 00000111 B902000000              	mov	ecx, 2
   150 00000116 F7F1                    	div	ecx
   151 00000118 89C1                    	mov	ecx, eax
   152                                  	
   153                                  sortLoop:
   154 0000011A 51                      	push	ecx
   155 0000011B BB[00000000]            	mov	ebx, nums
   156 00000120 B907000000              	mov	ecx, numslen
   157 00000125 49                      	dec	ecx
   158 00000126 31C0                    	xor	eax, eax
   159 00000128 31D2                    	xor	edx, edx
   160                                  sortVals:
   161 0000012A 8A03                    	mov	al, [ebx]
   162 0000012C 8A5301                  	mov	dl, [ebx+1]	
   163 0000012F 39D0                    	cmp	eax, edx
   164 00000131 7E02                    	jng	skipXchg
   165 00000133 86C2                    	xchg	al, dl
   166                                  skipXchg:	
   167 00000135 8803                    	mov	[ebx], al
   168 00000137 885301                  	mov	[ebx+1], dl
   169 0000013A 43                      	inc	ebx
   170 0000013B E2ED                    	loop	sortVals
   171 0000013D 59                      	pop	ecx
   172 0000013E E2DA                    	loop	sortLoop
   173                                  	
   174 00000140 61                      	popa
   175 00000141 C3                      	ret
